{"data":{"site":{"siteMetadata":{"title":"Kaier33","author":"KaierChou"}},"markdownRemark":{"id":"8e62b06b-3399-5e7b-a26c-86f8cc1a3da7","html":"<blockquote>\n<p>以下测试行为基于ECMA 262(5.1)在”浏览器环境”中。</p>\n</blockquote>\n<hr>\n<ol>\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>parseInt<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// => [1, NaN, NaN] </span></code></pre></div>\n<p>parseInt原本传的是2个参数(val,radix) ,  map 函数传参分别是 (ele,index,array)<br>\nso, 当跑到数组的第二个项时,把map的第二个参数index丢给parsetInt的radix , parsetInt(‘2’,1) 返回便是 NaN </p>\n<hr>\n<ol start=\"2\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// =>  [\"object\", false]</span></code></pre></div>\n<p>typeOf null 返回”Object”实际上是个bug, 因为null根本就不在Object的原型上 , instanceof 已经给出了答案;\nnull 不是一个对象，它是原始值.  <br>\nnull(JSVAL_NULL)是机器代码的空指针，一个对象类型的引用，值是零。<br>\n标志位 000：对象，数据是对象的应用。 <br>\n这样就很明显的知道为什么typeof null的值是object了：它检查了标志位的类型，标志位表明它是个对象。</p>\n<hr>\n<ol start=\"3\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span>pow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span>pow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// Uncaught TypeError: Reduce of empty array with no initial value</span></code></pre></div>\n<p>MDN已有描述 : if the array is empty and no initialValue is provided, TypeError will be thrown.  <br>\n如果一个空数组没有指定 initialValue ,则会报错.</p>\n<hr>\n<ol start=\"4\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> val <span class=\"token operator\">=</span> <span class=\"token string\">'smtg'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Value is '</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">===</span> <span class=\"token string\">'smtg'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'Something'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'Nothing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// => Something</span></code></pre></div>\n<p>三元运算符具有更高的优先级。 <br/>\n那如果要连着打印呢? 把 三元 那一段用括号包起来就行了</p>\n<hr>\n<ol start=\"5\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'World!'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> name <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Jack'</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Goodbye '</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello '</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// => Goodbye Jack</span></code></pre></div>\n<p>IIFE自执行函数有自己的作用域~ </p>\n<hr>\n<ol start=\"6\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token constant\">END</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token constant\">START</span> <span class=\"token operator\">=</span> <span class=\"token constant\">END</span> <span class=\"token operator\">-</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token constant\">START</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">END</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>boom~~ 数太大.浏览器被玩坏了,实际上什么都不会输出~~~</p>\n<hr>\n<ol start=\"7\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> ary <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nary<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nary<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// => []</span></code></pre></div>\n<p>数组的空位empty ,length长度也会算上去. ary的length是11 <br>\n虽然ary[3]返回的是undefined, 不代表ary[3]里面就是undefined ,而是 empty , <br>\nfilter不会对缺失的项进行操作,所以返回[]</p>\n<hr>\n<ol start=\"8\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> two   <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span>\n<span class=\"token keyword\">var</span> one   <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span>\n<span class=\"token keyword\">var</span> eight <span class=\"token operator\">=</span> <span class=\"token number\">0.8</span>\n<span class=\"token keyword\">var</span> six   <span class=\"token operator\">=</span> <span class=\"token number\">0.6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>two <span class=\"token operator\">-</span> one <span class=\"token operator\">==</span> one<span class=\"token punctuation\">,</span> eight <span class=\"token operator\">-</span> six <span class=\"token operator\">==</span> two<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// => [true, false]</span></code></pre></div>\n<p>浮点运算精度丢失的问题</p>\n<hr>\n<ol start=\"9\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">showCase</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Case A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Case B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Do not know!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">showCase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// => Do not know!</span></code></pre></div>\n<p>new String(“A”) 返回的是一个字符对象 {‘A’}</p>\n<hr>\n<ol start=\"10\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">showCase2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Case A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Case B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Do not know!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">showCase2</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// => Case A</span></code></pre></div>\n<p>注意这里没有加new, 返回的是个字符串</p>\n<hr>\n<ol start=\"11\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isOdd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isEven</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isSane</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">isEven</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">isOdd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'13'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>isSane<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// =>  [true, true, true, false, false] </span></code></pre></div>\n<p>-9 % 2 返回的还会是负数 -1, Infinity % 2 为 NaN; 所为后面2个是false</p>\n<hr>\n<ol start=\"12\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// => 3, NaN, 3</span></code></pre></div>\n<p>除了“0、1”外，其它数字都不是有效二进制数字，所为第二个为 NaN , 那么0呢? <br/>\nparseInt将考虑一个伪基数，并假设您指的是10，因此返回3。</p>\n<hr>\n<ol start=\"13\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// => true</span></code></pre></div>\n<p>数组的原型链是也是个数组~</p>\n<hr>\n<ol start=\"14\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wut\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// => result: false</span></code></pre></div>\n<p>[0]的bool是true没错, 但是, [0]和bool 去==的话, 就是发生隐式转换 , 最终[0].toString 去对比,返回便是false</p>\n<ol start=\"15\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>指针地址不同</p>\n<ol start=\"16\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'5'</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span>\n<span class=\"token string\">'5'</span> <span class=\"token operator\">-</span> <span class=\"token number\">3</span>\n\n<span class=\"token comment\">// => '53', 2</span></code></pre></div>\n<ul>\n<li>在字符串前是当连接符用的, - 会发生隐式转换</li>\n</ul>\n<hr>\n<ol start=\"17\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n<span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> \n\n<span class=\"token comment\">// => 2 , 0</span></code></pre></div>\n<p>个人看法: 简单点理解就是比较 - +哪个多 , +多的就相加, -多的将相减 ~~ </p>\n<ol start=\"18\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> ary <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nary<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\nary<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// => [\"1\", empty × 2]</span></code></pre></div>\n<p>因为map只对数组中已经初始化的元素进行调用~</p>\n<hr>\n<ol start=\"19\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sidEffecting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ary<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ary<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  c <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  <span class=\"token function\">sidEffecting</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// => 21</span></code></pre></div>\n<p>传参后被函数改动了数值. 所以是10+1+10</p>\n<hr>\n<ol start=\"20\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">111111111111111110000</span><span class=\"token punctuation\">,</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">1111</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// => 111111111111111110000</span></code></pre></div>\n<p>jvaScript中的数字缺乏精确性会影响小数字和大数字~ </p>\n<hr>\n<ol start=\"21\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">;</span>\n<span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// VM2952:1 Uncaught TypeError: Cannot convert undefined or null to object</span></code></pre></div>\n<p>我猜这道题本来想考察this指向的问题.. 旧一点的浏览器会返回window, 现在是直接报错~</p>\n<hr>\n<ol start=\"22\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_VALUE</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n\n<span class=\"token comment\">// =>  true</span></code></pre></div>\n<p>Number.MIN_VALUE提供了一个大于0的最小值</p>\n<hr>\n<ol start=\"23\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// [true, true] </span></code></pre></div>\n<p>隐式转换会把 true变成1 , false变成0 </p>\n<hr>\n<ol start=\"24\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// => true</span></code></pre></div>\n<p>值和引用类型去比较,把引用类型转话成值类型.<br>\n具体转换过程看这篇:<a href=\"https://stackoverflow.com/questions/7202157/why-does-return-the-string-10/7202287#7202287\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/7202157/why-does-return-the-string-10/7202287#7202287</a></p>\n<hr>\n<ol start=\"25\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">3.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//报错.</span>\n<span class=\"token number\">3.</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//3.是 \"3\"的有效写法</span>\n<span class=\"token number\">3.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//报错.</span></code></pre></div>\n<p>运算符优先级的问题，点运算符会被优先识别为数字常量的一部分，然后才是对象属性访问符.<br>\n3.toString() 会被 JS 引擎解析成 (3.)toString() 所以报错 <br>\n3..toString() 会被 JS 引擎解析成 (3.).toString() 会输出 “3” <br>\n3…toString() 会被 JS 引擎解析成 (3.)..toString() 还是报错 <br></p>\n<hr>\n<ol start=\"26\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// => : 1, error</span></code></pre></div>\n<p>作用域问题, Y是全局的, X的作用域在函数内</p>\n<hr>\n<ol start=\"27\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token regex\">/123/</span><span class=\"token punctuation\">,</span>\n    b <span class=\"token operator\">=</span> <span class=\"token regex\">/123/</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">==</span> b\na <span class=\"token operator\">===</span> b\n\n<span class=\"token comment\">// =>  false false</span></code></pre></div>\n<p>reg是个对象 , 2个对象指针不同 ,所以看起来值一样也是没用的,<br>\n这里相当于去比较 {a:1}=={a:1}</p>\n<hr>\n<ol start=\"28\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\na <span class=\"token operator\">==</span>  b  \na <span class=\"token operator\">===</span> b\na <span class=\"token operator\">></span> c\na <span class=\"token operator\">&lt;</span> c\n\n<span class=\"token comment\">// => false false false true</span></code></pre></div>\n<p>前面两个还好理解, 毕竟引用地址各不相同.<br>\n主要是看 比较大小, 引用类型间比较大小是按照字典序比较，就是先比第一项谁大，相同再去比第二项。</p>\n<hr>\n<ol start=\"29\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">===</span> b<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> b<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// => [false ,true]</span></code></pre></div>\n<p>首先, 实例对象没有prototype , 只有<strong>proto</strong> , 所以第一个是false; <br>\n然后, Object.getPrototypeOf() 方法返回指定对象的原型 , a的<strong>poroto</strong> 指向的是Object.prototype，也就是Object.getPrototypeOf(a)。 <br>\n注意Object.getPrototypeOf(Object)  不是  Object.prototype</p>\n<hr>\n<ol start=\"30\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">===</span> b\n\n<span class=\"token comment\">// => false</span></code></pre></div>\n<p>a是构造函数f的原型 ： {constructor: ƒ} <br>\nb是实例f的原型对象 ： ƒ () { [native code] }</p>\n<hr>\n<ol start=\"31\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> oldName <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>oldName<span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// =>  ['foo','foo']  </span></code></pre></div>\n<p>函数都有一个name,且修改无效</p>\n<hr>\n<ol start=\"32\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"1 2 3\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">,</span> parseInt<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// =>  \"1 NaN 3\" </span></code></pre></div>\n<p>如果没有与子表达式匹配的项，第二参数为出现的位置.所以第一个参数是匹配项，第二个参数是位置 <br/>\nparseInt(‘1’, 0) // 0会被默认改为10进制 <br>\nparseInt(‘2’, 2) // 2进制中不可能有2 <br>\nparseInt(‘3’, 4) // 4进制中有3的存在 </p>\n<hr>\n<ol start=\"33\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> parent <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nf<span class=\"token punctuation\">.</span>name \nparent<span class=\"token punctuation\">.</span>name \n<span class=\"token keyword\">typeof</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">typeof</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\">// =>  'f', '', 'function', 'undefined'</span></code></pre></div>\n<p>第一个是”f”很好理解吧, 就是f函数的name <br>\nparent是f原型对象的名字为 ” <br>\neval(f.name) 为 f,f的数据类型是function <br>\neval(parent.name) 为undefined, ‘undefined’ <br></p>\n<hr>\n<ol start=\"34\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> lowerCaseOnly <span class=\"token operator\">=</span>  <span class=\"token regex\">/^[a-z]+$/</span>\n<span class=\"token punctuation\">[</span>lowerCaseOnly<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lowerCaseOnly<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// =>  [true, true]</span></code></pre></div>\n<p>null, undefined(没传参) 会被转义为字符串, 所以就匹配到规则(匹配英文字母)了 </p>\n<hr>\n<ol start=\"35\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// =>  \", ,\"</span></code></pre></div>\n<p>数组是 [empty,empty,empty] . 所以转出来便是 ’, , ’</p>\n<hr>\n<ol start=\"36\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"1 2 3\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">,</span> parseInt<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// =>  \"1 NaN 3\" </span></code></pre></div>\n<p>类是一个保留字，但它被Chrome、Firefox和Opera接受为属性名。在IE中，它将失败。另一方面，每个人都会接受大多数其他保留字（int、private、throws等）作为变量名，而class是禁止的。</p>\n<hr>\n<ol start=\"37\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"1 2 3\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">,</span> parseInt<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// =>  \"1 NaN 3\" </span></code></pre></div>\n<p>如果没有与子表达式匹配的项，第二参数为出现的位置.所以第一个参数是匹配项，第二个参数是位置 <br/>\nparseInt(‘1’, 0) // 0会被默认改为10进制 <br>\nparseInt(‘2’, 2) // 2进制中不可能有2 <br>\nparseInt(‘3’, 4) // 4进制中有3的存在 </p>\n<hr>\n<ol start=\"38\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"1 2 3\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">,</span> parseInt<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// =>  \"1 NaN 3\" </span></code></pre></div>\n<p>如果没有与子表达式匹配的项，第二参数为出现的位置.所以第一个参数是匹配项，第二个参数是位置 <br/>\nparseInt(‘1’, 0) // 0会被默认改为10进制 <br>\nparseInt(‘2’, 2) // 2进制中不可能有2 <br>\nparseInt(‘3’, 4) // 4进制中有3的存在 </p>\n<hr>\n<ol start=\"39\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"1 2 3\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">,</span> parseInt<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// =>  \"1 NaN 3\" </span></code></pre></div>\n<p>如果没有与子表达式匹配的项，第二参数为出现的位置.所以第一个参数是匹配项，第二个参数是位置 <br/>\nparseInt(‘1’, 0) // 0会被默认改为10进制 <br>\nparseInt(‘2’, 2) // 2进制中不可能有2 <br>\nparseInt(‘3’, 4) // 4进制中有3的存在 </p>\n<hr>\n<ol start=\"40\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"1 2 3\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">,</span> parseInt<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// =>  \"1 NaN 3\" </span></code></pre></div>\n<p>如果没有与子表达式匹配的项，第二参数为出现的位置.所以第一个参数是匹配项，第二个参数是位置 <br/>\nparseInt(‘1’, 0) // 0会被默认改为10进制 <br>\nparseInt(‘2’, 2) // 2进制中不可能有2 <br>\nparseInt(‘3’, 4) // 4进制中有3的存在 </p>\n<hr>\n<ol start=\"41\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"1 2 3\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">,</span> parseInt<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// =>  \"1 NaN 3\" </span></code></pre></div>\n<p>如果没有与子表达式匹配的项，第二参数为出现的位置.所以第一个参数是匹配项，第二个参数是位置 <br/>\nparseInt(‘1’, 0) // 0会被默认改为10进制 <br>\nparseInt(‘2’, 2) // 2进制中不可能有2 <br>\nparseInt(‘3’, 4) // 4进制中有3的存在 </p>\n<hr>\n<ol start=\"42\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"1 2 3\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">,</span> parseInt<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// =>  \"1 NaN 3\" </span></code></pre></div>\n<p>如果没有与子表达式匹配的项，第二参数为出现的位置.所以第一个参数是匹配项，第二个参数是位置 <br/>\nparseInt(‘1’, 0) // 0会被默认改为10进制 <br>\nparseInt(‘2’, 2) // 2进制中不可能有2 <br>\nparseInt(‘3’, 4) // 4进制中有3的存在 </p>\n<hr>\n<ol start=\"43\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"1 2 3\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">,</span> parseInt<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// =>  \"1 NaN 3\" </span></code></pre></div>\n<p>如果没有与子表达式匹配的项，第二参数为出现的位置.所以第一个参数是匹配项，第二个参数是位置 <br/>\nparseInt(‘1’, 0) // 0会被默认改为10进制 <br>\nparseInt(‘2’, 2) // 2进制中不可能有2 <br>\nparseInt(‘3’, 4) // 4进制中有3的存在 </p>\n<hr>\n<ol start=\"44\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"1 2 3\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">,</span> parseInt<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// =>  \"1 NaN 3\" </span></code></pre></div>\n<p>如果没有与子表达式匹配的项，第二参数为出现的位置.所以第一个参数是匹配项，第二个参数是位置 <br/>\nparseInt(‘1’, 0) // 0会被默认改为10进制 <br>\nparseInt(‘2’, 2) // 2进制中不可能有2 <br>\nparseInt(‘3’, 4) // 4进制中有3的存在 </p>\n<hr>\n<hr>\n<h4 id=\"referencing-\"><a href=\"#referencing-\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Referencing :</h4>\n<p><a href=\"https://javascript-puzzlers.herokuapp.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Puzzlers!</a>  </p>\n<!-- [end](/thanks watch/) -->","timeToRead":7,"frontmatter":{"title":"Do You Really Know JavaScript?","date":"December 01, 2020","spoiler":"js中一些“奇怪“的知识点😝"},"fields":{"slug":"/do-you-really-know-javascript/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/do-you-really-know-javascript/","previous":{"fields":{"slug":"/Implementing-promise-using-js/","langKey":"en","directoryName":"Implementing-promise-using-js","maybeAbsoluteLinks":["/thanks watch/"]},"frontmatter":{"title":"Implementing Promise Using JavaScript"}},"next":{"fields":{"slug":"/ten-commandments-of-programming/","langKey":"en","directoryName":"ten-commandments-of-programming","maybeAbsoluteLinks":["/thanks watch/"]},"frontmatter":{"title":"Ten Commandments of Programming"}},"translations":[],"translatedLinks":[]}}