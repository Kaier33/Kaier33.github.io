{"data":{"site":{"siteMetadata":{"title":"Kaier33","author":"KaierChou"}},"markdownRemark":{"id":"d4f4f3cf-53c6-5a92-8f6c-7dbcb36b251b","html":"<h2 id=\"javascript-is-a-single-thread-language\"><a href=\"#javascript-is-a-single-thread-language\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript is a single thread language</h2>\n<p>众所周知,  JS是一门单线程语言,  这和它的用途有关，作为浏览器脚本语言，它主要是用来处理页面中用户的交互，以及操作DOM树、CSS样式树来给用户呈现一份动态而丰富的交互体验和服务器逻辑的交互处理。</p>\n<p>如果JavaScript是多线程的方式来操作这些UI DOM，则可能出现UI操作的冲突。</p>\n<p>浏览器中的GUI线程和JS引擎是互斥的,  当JS引擎执行时GUI线程会被挂起，GUI更新则会被保存在一个队列中等到JS引擎线程空闲时立即被执行。</p>\n<p>如果有一个进程需要很长时间，那么它将阻塞其他进程运行。</p>\n<p>因此，在浏览器中定义了一个等待进程响应的超时任务。当进程在超时中没有响应时，你将看到一个弹出窗口，询问是否终止这个页面。</p>\n<div align=\"center\">\n  <img src=\"https://i.ibb.co/QNY2TGx/killPage.jpg\">\n</div>\n<blockquote>\n<p>关于 Web Worker, 虽然运行 JavaScript 脚本创建多个线程, 但是子线程完全受主线程控制, 且不得操作DOM, 所以这个新标准没有改变JavaScript单线程的本质。</p>\n</blockquote>\n<h2 id=\"javascript-runtime-engine\"><a href=\"#javascript-runtime-engine\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript runtime engine</h2>\n<div align=\"center\">\n  <img src=\"https://i.ibb.co/s39YRy8/js.png\">\n</div>\n<blockquote>\n<p>JS内存空间  </p>\n</blockquote>\n<p><strong>Memory Heap</strong>:  堆 是我们定义变量时存储对象的地方.    </p>\n<p><strong>Call Stack</strong>: 执行栈，也就是在其它编程语言中所说的“调用栈”，是一种拥有 LIFO（后进先出）数据结构的栈，被用来存储代码运行时创建的所有执行上下文。<br>\n当 JavaScript 引擎第一次遇到你的脚本时，它会创建一个全局的执行上下文并且压入当前执行栈。每当引擎遇到一个函数调用，它会为该函数创建一个新的执行上下文并压入栈的顶部。<br>\n引擎会执行那些执行上下文位于栈顶的函数。当该函数执行结束时，执行上下文从栈中弹出，控制流程到达当前栈中的下一个上下文。  </p>\n<p>两者区别:  </p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><code class=\"language-text\">栈内存</code></th>\n<th align=\"left\"><code class=\"language-text\">堆内存</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">存储基础数据类型</td>\n<td align=\"left\">存储引用数据类型</td>\n</tr>\n<tr>\n<td align=\"left\">按值访问</td>\n<td align=\"left\">按引用访问</td>\n</tr>\n<tr>\n<td align=\"left\">存储的值大小固定</td>\n<td align=\"left\">存储的值大小不定，可动态调整</td>\n</tr>\n<tr>\n<td align=\"left\">由系统自动分配内存空间</td>\n<td align=\"left\">由程序员通过代码进行分配</td>\n</tr>\n<tr>\n<td align=\"left\">主要用来执行程序</td>\n<td align=\"left\">主要用来存放对象</td>\n</tr>\n<tr>\n<td align=\"left\">空间小，运行效率高</td>\n<td align=\"left\">空间大，但是运行效率相对较低</td>\n</tr>\n<tr>\n<td align=\"left\">先进后出，后进先出</td>\n<td align=\"left\">无序存储，可根据引用直接获取</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Web APIs  </p>\n</blockquote>\n<p>然后就阔以愉快的玩耍啦~</p>\n<!-- [end](/thanks watch/) -->","timeToRead":1,"frontmatter":{"title":"The JavaScript Event Loop","date":"October 29, 2019","spoiler":"JS的事件循环以及异步队列"},"fields":{"slug":"/event-loop/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/event-loop/","previous":{"fields":{"slug":"/http-upgrade-https/","langKey":"en","directoryName":"http-upgrade-https","maybeAbsoluteLinks":["/thanks watch/"]},"frontmatter":{"title":"记一次http升级https"}},"next":null,"translations":[],"translatedLinks":[]}}