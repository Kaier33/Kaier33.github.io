{"data":{"site":{"siteMetadata":{"title":"Kaier33","author":"KaierChou"}},"markdownRemark":{"id":"8e62b06b-3399-5e7b-a26c-86f8cc1a3da7","html":"<blockquote>\n<p>以下测试行为基于ECMA 262(5.1)在”浏览器环境”中。</p>\n</blockquote>\n<hr>\n<p>1.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>parseInt<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// => [1, NaN, NaN] </span></code></pre></div>\n<p>parseInt原本传的是2个参数(val,radix) ,  map 函数传参分别是 (ele,index,array)<br>\nso, 当跑到数组的第二个项时,把map的第二个参数index丢给parsetInt的radix , parsetInt(‘2’,1) 返回便是 NaN </p>\n<hr>\n<p>2.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// =>  [\"object\", false]</span></code></pre></div>\n<p>typeOf null 返回”Object”实际上是个bug, 因为null根本就不在Object的原型上 , instanceof 已经给出了答案;\nnull 不是一个对象，它是原始值.  <br>\nnull(JSVAL_NULL)是机器代码的空指针，一个对象类型的引用，值是零。<br>\n标志位 000：对象，数据是对象的应用。 <br>\n这样就很明显的知道为什么typeof null的值是object了：它检查了标志位的类型，标志位表明它是个对象。</p>\n<hr>\n<p>3.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span>pow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span>pow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// Uncaught TypeError: Reduce of empty array with no initial value</span></code></pre></div>\n<p>MDN已有描述 : if the array is empty and no initialValue is provided, TypeError will be thrown.  <br>\n如果一个空数组没有指定 initialValue ,则会报错.</p>\n<hr>\n<p>4.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> val <span class=\"token operator\">=</span> <span class=\"token string\">'smtg'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Value is '</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">===</span> <span class=\"token string\">'smtg'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'Something'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'Nothing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// => Something</span></code></pre></div>\n<p>三元运算符具有更高的优先级。 <br/>\n那如果要连着打印呢? 把 三元 那一段用括号包起来就行了</p>\n<ol start=\"5\">\n<li></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'World!'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> name <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Jack'</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Goodbye '</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello '</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// => Goodbye Jack</span></code></pre></div>\n<p>IIFE自执行函数有自己的作用域~ </p>\n<p>6.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token constant\">END</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token constant\">START</span> <span class=\"token operator\">=</span> <span class=\"token constant\">END</span> <span class=\"token operator\">-</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token constant\">START</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">END</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>boom~~ 数太大.浏览器被玩坏了,实际上什么都不会输出~~~</p>\n<p>7.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> ary <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nary<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nary<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// => []</span></code></pre></div>\n<h4 id=\"referencing-\"><a href=\"#referencing-\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Referencing :</h4>\n<p><a href=\"https://javascript-puzzlers.herokuapp.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Puzzlers!</a>  </p>\n<!-- [end](/thanks watch/) -->","timeToRead":1,"frontmatter":{"title":"Do You Really Know JavaScript?","date":"March 03, 2021","spoiler":"js中一些“奇怪“的知识点😝"},"fields":{"slug":"/do-you-really-know-javascript/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/do-you-really-know-javascript/","previous":{"fields":{"slug":"/the-orinoco-garbage-collector/","langKey":"en","directoryName":"the-orinoco-garbage-collector","maybeAbsoluteLinks":["/thanks watch/"]},"frontmatter":{"title":"The Orinoco Garbage Collector"}},"next":null,"translations":[],"translatedLinks":[]}}