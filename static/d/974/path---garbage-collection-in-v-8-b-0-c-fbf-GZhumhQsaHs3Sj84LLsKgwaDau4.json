{"data":{"site":{"siteMetadata":{"title":"Kaier33","author":"KaierChou"}},"markdownRemark":{"id":"a3b7b68a-ebb7-562a-bd9e-87e53c4f4a68","html":"<p>许多现代语言引擎，如Chrome的V8 JavaScript引擎，都能动态地管理运行中的应用程序的内存，因此开发人员不需要自己担心。引擎会定期翻阅分配给应用程序的内存，确定哪些数据不再需要，并将其清除以腾出空间。这个过程被称为垃圾收集。  </p>\n<h3 id=\"\"><a href=\"#\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ol>\n<li>一个未经琢磨的垃圾回收器，会致使程序在运行中出现长时间、无法预期的停顿，这直接影响到交互系统（特别是带有动画效果的）在使用上的体验。</li>\n<li>引用计数系统时常被吹捧为垃圾回收机制的替代品，但当大型子图中的最后一个对象的引用解除后，同样也会有无法预期的停顿。而且引用计数系统在频繁执行读取、改写、存储操作时，也会有可观的性能负担。</li>\n</ol>\n<h3 id=\"young-generation\"><a href=\"#young-generation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>young generation</h3>\n<h3 id=\"old-generation\"><a href=\"#old-generation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>old generation</h3>\n<p>Scavenge算法对于快速回收、紧缩小片内存效果很好，但对于大片内存则消耗过大。因为Scavenge算法需要出区和入区两个区域，这对于小片内存尚可，而对于超过数MB的内存就开始变得不切实际了。</p>\n<h4 id=\"referencing-\"><a href=\"#referencing-\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Referencing :</h4>\n<p><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tasks, microtasks, queues and schedules</a></p>\n<p><a href=\"https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How JavaScript works: Event loop and the rise of Async programming + 5 ways to better coding with async/await</a></p>\n<p><a href=\"https://juejin.im/post/5ca49fea6fb9a05e731fc03d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">浏览器多线程和js单线程</a></p>\n<p><a href=\"https://juejin.im/post/5cbc0a9cf265da03b11f3505#heading-5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">最后一次搞懂 Event Loop</a></p>\n<!-- [end](/thanks watch/) -->","timeToRead":1,"frontmatter":{"title":"Garbage Collection In V8","date":"February 07, 2021","spoiler":"浅谈V8中的“垃圾回收机制”"},"fields":{"slug":"/garbage-collection-in-V8/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/garbage-collection-in-V8/","previous":{"fields":{"slug":"/implementing-data-structures-using-javascript/","langKey":"en","directoryName":"implementing-data-structures-using-javascript","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Implementing Data Structures Using JavaScript"}},"next":null,"translations":[],"translatedLinks":[]}}