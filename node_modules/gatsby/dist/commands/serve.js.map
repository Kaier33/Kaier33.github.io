{"version":3,"sources":["../../src/commands/serve.js"],"names":["path","require","openurl","fs","compression","express","chalk","reachMatch","match","rl","onExit","telemetry","detectPortInUseAndPrompt","getConfigFile","preferDefault","rlInterface","createInterface","input","process","stdin","output","stdout","on","exit","trackCli","getPages","directory","readFile","join","then","contents","JSON","parse","catch","clientOnlyPathsRouter","pages","options","clientOnlyRoutes","filter","page","matchPath","req","res","next","url","accepts","route","find","clientRoute","sendFile","err","module","exports","program","startBackgroundUpdate","prefixPaths","port","open","host","parseInt","config","configPathPrefix","pathPrefix","root","app","router","Router","use","expressMiddleware","static","status","header","startListening","listen","openUrlString","console","log","blue","bold","Promise","resolve","yellow"],"mappings":"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","sourcesContent":["/* @flow weak */\nconst path = require(`path`)\nconst openurl = require(`better-opn`)\nconst fs = require(`fs-extra`)\nconst compression = require(`compression`)\nconst express = require(`express`)\nconst chalk = require(`chalk`)\nconst { match: reachMatch } = require(`@reach/router/lib/utils`)\nconst rl = require(`readline`)\nconst onExit = require(`signal-exit`)\n\nconst telemetry = require(`gatsby-telemetry`)\n\nconst detectPortInUseAndPrompt = require(`../utils/detect-port-in-use-and-prompt`)\nconst getConfigFile = require(`../bootstrap/get-config-file`)\nconst preferDefault = require(`../bootstrap/prefer-default`)\n\nconst rlInterface = rl.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\n// Quit immediately on hearing ctrl-c\nrlInterface.on(`SIGINT`, () => {\n  process.exit()\n})\n\nonExit(() => {\n  telemetry.trackCli(`SERVE_STOP`)\n})\n\nconst getPages = directory =>\n  fs\n    .readFile(path.join(directory, `.cache`, `pages.json`))\n    .then(contents => JSON.parse(contents))\n    .catch(() => [])\n\nconst clientOnlyPathsRouter = (pages, options) => {\n  const clientOnlyRoutes = pages.filter(page => page.matchPath)\n  return (req, res, next) => {\n    const { url } = req\n    if (req.accepts(`html`)) {\n      const route = clientOnlyRoutes.find(\n        clientRoute => reachMatch(clientRoute.matchPath, url) !== null\n      )\n      if (route && route.path) {\n        return res.sendFile(\n          path.join(route.path, `index.html`),\n          options,\n          err => {\n            if (err) {\n              next()\n            }\n          }\n        )\n      }\n    }\n    return next()\n  }\n}\n\nmodule.exports = async program => {\n  telemetry.trackCli(`SERVE_START`)\n  telemetry.startBackgroundUpdate()\n  let { prefixPaths, port, open, host } = program\n  port = typeof port === `string` ? parseInt(port, 10) : port\n\n  const config = await preferDefault(\n    getConfigFile(program.directory, `gatsby-config`)\n  )\n\n  const { pathPrefix: configPathPrefix } = config || {}\n\n  const pathPrefix = prefixPaths && configPathPrefix ? configPathPrefix : `/`\n\n  const root = path.join(program.directory, `public`)\n  const pages = await getPages(program.directory)\n\n  const app = express()\n  const router = express.Router()\n\n  app.use(telemetry.expressMiddleware(`SERVE`))\n\n  router.use(compression())\n  router.use(express.static(`public`))\n  router.use(clientOnlyPathsRouter(pages, { root }))\n  router.use((req, res, next) => {\n    if (req.accepts(`html`)) {\n      return res.status(404).sendFile(`404.html`, { root })\n    }\n    return next()\n  })\n  app.use(function(req, res, next) {\n    res.header(`Access-Control-Allow-Origin`, `http://${host}:${port}`)\n    res.header(`Access-Control-Allow-Credentials`, true)\n    res.header(\n      `Access-Control-Allow-Headers`,\n      `Origin, X-Requested-With, Content-Type, Accept`\n    )\n    next()\n  })\n  app.use(pathPrefix, router)\n\n  const startListening = () => {\n    app.listen(port, host, () => {\n      let openUrlString = `http://${host}:${port}${pathPrefix}`\n      console.log(\n        `${chalk.blue(`info`)} gatsby serve running at: ${chalk.bold(\n          openUrlString\n        )}`\n      )\n      if (open) {\n        console.log(`${chalk.blue(`info`)} Opening browser...`)\n        Promise.resolve(openurl(openUrlString)).catch(err =>\n          console.log(\n            `${chalk.yellow(\n              `warn`\n            )} Browser not opened because no browser was found`\n          )\n        )\n      }\n    })\n  }\n\n  port = await detectPortInUseAndPrompt(port, rlInterface)\n  startListening()\n}\n"],"file":"serve.js"}