{"version":3,"sources":["../../src/schema/resolvers.js"],"names":["systemPath","require","normalize","_","GraphQLList","getNullableType","getNamedType","getValueAt","findMany","typeName","args","context","info","nodeModel","runQuery","query","firstOnly","type","schema","getType","path","connectionType","findOne","filter","findManyPaginated","rp","result","paginate","skip","limit","distinct","source","field","edges","values","reduce","acc","node","value","concat","Date","toISOString","Array","from","Set","sort","group","groupedResults","isArray","forEach","key","Object","keys","fieldValue","push","results","count","length","items","slice","pageCount","Math","ceil","currentPage","hasPreviousPage","hasNextPage","totalCount","map","item","i","arr","next","previous","nodes","pageInfo","itemCount","perPage","link","by","fieldName","isPlainObject","returnType","getNodesByIds","ids","getNodeById","id","equals","eq","oneOf","in","operator","split","reduceRight","find","obj","fileByPath","findLinkedFileNode","relativePath","fileLinkPath","resolve","parentFileNode","dir","linkedFileNode","getAllNodes","n","absolutePath","findRootNodeAncestor","internal","resolveValue","v","module","exports"],"mappings":"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","sourcesContent":["const systemPath = require(`path`)\nconst normalize = require(`normalize-path`)\nconst _ = require(`lodash`)\nconst { GraphQLList, getNullableType, getNamedType } = require(`graphql`)\nconst { getValueAt } = require(`../utils/get-value-at`)\n\nconst findMany = typeName => ({ args, context, info }) =>\n  context.nodeModel.runQuery(\n    {\n      query: args,\n      firstOnly: false,\n      type: info.schema.getType(typeName),\n    },\n    { path: context.path, connectionType: typeName }\n  )\n\nconst findOne = typeName => ({ args, context, info }) =>\n  context.nodeModel.runQuery(\n    {\n      query: { filter: args },\n      firstOnly: true,\n      type: info.schema.getType(typeName),\n    },\n    { path: context.path }\n  )\n\nconst findManyPaginated = typeName => async rp => {\n  const result = await findMany(typeName)(rp)\n  return paginate(result, { skip: rp.args.skip, limit: rp.args.limit })\n}\n\nconst distinct = (source, args, context, info) => {\n  const { field } = args\n  const { edges } = source\n  const values = edges.reduce((acc, { node }) => {\n    const value = getValueAt(node, field)\n    return value != null\n      ? acc.concat(value instanceof Date ? value.toISOString() : value)\n      : acc\n  }, [])\n  return Array.from(new Set(values)).sort()\n}\n\nconst group = (source, args, context, info) => {\n  const { field } = args\n  const { edges } = source\n  const groupedResults = edges.reduce((acc, { node }) => {\n    const value = getValueAt(node, field)\n    const values = Array.isArray(value) ? value : [value]\n    values\n      .filter(value => value != null)\n      .forEach(value => {\n        const key = value instanceof Date ? value.toISOString() : value\n        acc[key] = (acc[key] || []).concat(node)\n      })\n    return acc\n  }, {})\n  return Object.keys(groupedResults)\n    .sort()\n    .reduce((acc, fieldValue) => {\n      acc.push({\n        ...paginate(groupedResults[fieldValue], args),\n        field,\n        fieldValue,\n      })\n      return acc\n    }, [])\n}\n\nconst paginate = (results = [], { skip = 0, limit }) => {\n  if (results === null) {\n    results = []\n  }\n\n  const count = results.length\n  const items = results.slice(skip, limit && skip + limit)\n\n  const pageCount = limit\n    ? Math.ceil(skip / limit) + Math.ceil((count - skip) / limit)\n    : skip\n    ? 2\n    : 1\n  const currentPage = limit ? Math.ceil(skip / limit) + 1 : skip ? 2 : 1\n  const hasPreviousPage = currentPage > 1\n  const hasNextPage = skip + limit < count\n\n  return {\n    totalCount: count,\n    edges: items.map((item, i, arr) => {\n      return {\n        node: item,\n        next: arr[i + 1],\n        previous: arr[i - 1],\n      }\n    }),\n    nodes: items,\n    pageInfo: {\n      currentPage,\n      hasPreviousPage,\n      hasNextPage,\n      itemCount: items.length,\n      pageCount,\n      perPage: limit,\n    },\n  }\n}\n\nconst link = ({ by = `id`, from }) => async (source, args, context, info) => {\n  const fieldValue = source && source[from || info.fieldName]\n\n  if (fieldValue == null || _.isPlainObject(fieldValue)) return fieldValue\n  if (\n    Array.isArray(fieldValue) &&\n    (fieldValue[0] == null || _.isPlainObject(fieldValue[0]))\n  ) {\n    return fieldValue\n  }\n\n  const returnType = getNullableType(info.returnType)\n  const type = getNamedType(returnType)\n\n  if (by === `id`) {\n    if (Array.isArray(fieldValue)) {\n      return context.nodeModel.getNodesByIds(\n        { ids: fieldValue, type: type },\n        { path: context.path }\n      )\n    } else {\n      return context.nodeModel.getNodeById(\n        { id: fieldValue, type: type },\n        { path: context.path }\n      )\n    }\n  }\n\n  const equals = value => {\n    return { eq: value }\n  }\n  const oneOf = value => {\n    return { in: value }\n  }\n  const operator = Array.isArray(fieldValue) ? oneOf : equals\n  args.filter = by.split(`.`).reduceRight((acc, key, i, { length }) => {\n    return {\n      [key]: i === length - 1 ? operator(acc) : acc,\n    }\n  }, fieldValue)\n\n  const result = await context.nodeModel.runQuery(\n    { query: args, firstOnly: !(returnType instanceof GraphQLList), type },\n    { path: context.path }\n  )\n  if (\n    returnType instanceof GraphQLList &&\n    Array.isArray(fieldValue) &&\n    Array.isArray(result)\n  ) {\n    return fieldValue.map(value =>\n      result.find(obj => getValueAt(obj, by) === value)\n    )\n  } else {\n    return result\n  }\n}\n\nconst fileByPath = ({ from }) => (source, args, context, info) => {\n  const fieldValue = source && source[from || info.fieldName]\n\n  if (fieldValue == null || _.isPlainObject(fieldValue)) return fieldValue\n  if (\n    Array.isArray(fieldValue) &&\n    (fieldValue[0] == null || _.isPlainObject(fieldValue[0]))\n  ) {\n    return fieldValue\n  }\n\n  const findLinkedFileNode = relativePath => {\n    // Use the parent File node to create the absolute path to\n    // the linked file.\n    const fileLinkPath = normalize(\n      systemPath.resolve(parentFileNode.dir, relativePath)\n    )\n\n    // Use that path to find the linked File node.\n    const linkedFileNode = _.find(\n      context.nodeModel.getAllNodes({ type: `File` }),\n      n => n.absolutePath === fileLinkPath\n    )\n    return linkedFileNode\n  }\n\n  // Find the File node for this node (we assume the node is something\n  // like markdown which would be a child node of a File node).\n  const parentFileNode = context.nodeModel.findRootNodeAncestor(\n    source,\n    node => node.internal && node.internal.type === `File`\n  )\n\n  return resolveValue(findLinkedFileNode, fieldValue)\n}\n\nconst resolveValue = (resolve, value) =>\n  Array.isArray(value)\n    ? value.map(v => resolveValue(resolve, v))\n    : resolve(value)\n\nmodule.exports = {\n  findManyPaginated,\n  findOne,\n  fileByPath,\n  link,\n  distinct,\n  group,\n  paginate,\n}\n"],"file":"resolvers.js"}